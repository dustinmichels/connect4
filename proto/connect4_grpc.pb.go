// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/connect4.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Connect4Game_JoinGame_FullMethodName = "/proto.Connect4Game/JoinGame"
	Connect4Game_MakeMove_FullMethodName = "/proto.Connect4Game/MakeMove"
)

// Connect4GameClient is the client API for Connect4Game service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition
type Connect4GameClient interface {
	// Player joins the game
	JoinGame(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	// Player makes a move
	MakeMove(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
}

type connect4GameClient struct {
	cc grpc.ClientConnInterface
}

func NewConnect4GameClient(cc grpc.ClientConnInterface) Connect4GameClient {
	return &connect4GameClient{cc}
}

func (c *connect4GameClient) JoinGame(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, Connect4Game_JoinGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connect4GameClient) MakeMove(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, Connect4Game_MakeMove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Connect4GameServer is the server API for Connect4Game service.
// All implementations must embed UnimplementedConnect4GameServer
// for forward compatibility.
//
// Service definition
type Connect4GameServer interface {
	// Player joins the game
	JoinGame(context.Context, *JoinRequest) (*JoinResponse, error)
	// Player makes a move
	MakeMove(context.Context, *MoveRequest) (*MoveResponse, error)
	mustEmbedUnimplementedConnect4GameServer()
}

// UnimplementedConnect4GameServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConnect4GameServer struct{}

func (UnimplementedConnect4GameServer) JoinGame(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGame not implemented")
}
func (UnimplementedConnect4GameServer) MakeMove(context.Context, *MoveRequest) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeMove not implemented")
}
func (UnimplementedConnect4GameServer) mustEmbedUnimplementedConnect4GameServer() {}
func (UnimplementedConnect4GameServer) testEmbeddedByValue()                      {}

// UnsafeConnect4GameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Connect4GameServer will
// result in compilation errors.
type UnsafeConnect4GameServer interface {
	mustEmbedUnimplementedConnect4GameServer()
}

func RegisterConnect4GameServer(s grpc.ServiceRegistrar, srv Connect4GameServer) {
	// If the following call pancis, it indicates UnimplementedConnect4GameServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Connect4Game_ServiceDesc, srv)
}

func _Connect4Game_JoinGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Connect4GameServer).JoinGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Connect4Game_JoinGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Connect4GameServer).JoinGame(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connect4Game_MakeMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Connect4GameServer).MakeMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Connect4Game_MakeMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Connect4GameServer).MakeMove(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Connect4Game_ServiceDesc is the grpc.ServiceDesc for Connect4Game service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Connect4Game_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Connect4Game",
	HandlerType: (*Connect4GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinGame",
			Handler:    _Connect4Game_JoinGame_Handler,
		},
		{
			MethodName: "MakeMove",
			Handler:    _Connect4Game_MakeMove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/connect4.proto",
}
